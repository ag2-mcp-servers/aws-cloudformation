# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:01:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AcceptTermsAndConditions(RootModel[bool]):
    root: bool


class Account(RootModel[constr(pattern=r'^[0-9]{12}$')]):
    root: constr(pattern=r'^[0-9]{12}$')


class AccountFilterType(Enum):
    NONE = 'NONE'
    INTERSECTION = 'INTERSECTION'
    DIFFERENCE = 'DIFFERENCE'
    UNION = 'UNION'


class AccountGateStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'


class AccountGateStatusReason(RootModel[str]):
    root: str


class AccountList(RootModel[List[Account]]):
    root: List[Account]


class AccountsUrl(
    RootModel[constr(pattern=r'(s3://|http(s?)://).+', min_length=1, max_length=5120)]
):
    root: constr(pattern=r'(s3://|http(s?)://).+', min_length=1, max_length=5120)


class AllowedValue(RootModel[str]):
    root: str


class AllowedValues(RootModel[List[AllowedValue]]):
    root: List[AllowedValue]


class AlreadyExistsException(RootModel[Any]):
    root: Any


class Arn(RootModel[str]):
    root: str


class AutoDeploymentNullable(RootModel[bool]):
    root: bool


class AutoUpdate(RootModel[bool]):
    root: bool


class BoxedInteger(RootModel[int]):
    root: int


class BoxedMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class CFNRegistryException(RootModel[Any]):
    root: Any


class CallAs(Enum):
    SELF = 'SELF'
    DELEGATED_ADMIN = 'DELEGATED_ADMIN'


class CapabilitiesReason(RootModel[str]):
    root: str


class Capability(Enum):
    CAPABILITY_IAM = 'CAPABILITY_IAM'
    CAPABILITY_NAMED_IAM = 'CAPABILITY_NAMED_IAM'
    CAPABILITY_AUTO_EXPAND = 'CAPABILITY_AUTO_EXPAND'


class Category(Enum):
    REGISTERED = 'REGISTERED'
    ACTIVATED = 'ACTIVATED'
    THIRD_PARTY = 'THIRD_PARTY'
    AWS_TYPES = 'AWS_TYPES'


class CausingEntity(RootModel[str]):
    root: str


class ChangeAction(Enum):
    Add = 'Add'
    Modify = 'Modify'
    Remove = 'Remove'
    Import = 'Import'
    Dynamic = 'Dynamic'


class ChangeSetHooksStatus(Enum):
    PLANNING = 'PLANNING'
    PLANNED = 'PLANNED'
    UNAVAILABLE = 'UNAVAILABLE'


class ChangeSetId(RootModel[constr(pattern=r'arn:[-a-zA-Z0-9:/]*', min_length=1)]):
    root: constr(pattern=r'arn:[-a-zA-Z0-9:/]*', min_length=1)


class ChangeSetName(
    RootModel[constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=128)


class ChangeSetNameOrId(
    RootModel[
        constr(
            pattern=r'[a-zA-Z][-a-zA-Z0-9]*|arn:[-a-zA-Z0-9:/]*',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z][-a-zA-Z0-9]*|arn:[-a-zA-Z0-9:/]*',
        min_length=1,
        max_length=1600,
    )


class ChangeSetNotFoundException(RootModel[Any]):
    root: Any


class ChangeSetStatus(Enum):
    CREATE_PENDING = 'CREATE_PENDING'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    DELETE_PENDING = 'DELETE_PENDING'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_FAILED = 'DELETE_FAILED'
    FAILED = 'FAILED'


class ChangeSetStatusReason(RootModel[str]):
    root: str


class ChangeSetType(Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    IMPORT = 'IMPORT'


class ChangeSource(Enum):
    ResourceReference = 'ResourceReference'
    ParameterReference = 'ParameterReference'
    ResourceAttribute = 'ResourceAttribute'
    DirectModification = 'DirectModification'
    Automatic = 'Automatic'


class ChangeType(Enum):
    Resource = 'Resource'


class ClientRequestToken(
    RootModel[constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)


class ClientToken(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class ConfigurationSchema(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=60000)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=60000)


class ConnectionArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+', min_length=1, max_length=256
    )


class ContinueUpdateRollbackOutput(BaseModel):
    pass


class CreateStackInstancesOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class CreatedButModifiedException(RootModel[Any]):
    root: Any


class CreationTime(RootModel[datetime]):
    root: datetime


class DeactivateTypeOutput(BaseModel):
    pass


class DeleteChangeSetOutput(BaseModel):
    pass


class DeleteStackInstancesOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class DeleteStackSetOutput(BaseModel):
    pass


class DeletionTime(RootModel[datetime]):
    root: datetime


class DeprecatedStatus(Enum):
    LIVE = 'LIVE'
    DEPRECATED = 'DEPRECATED'


class DeregisterTypeOutput(BaseModel):
    pass


class Description(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class DetectStackSetDriftOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class DifferenceType(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'
    NOT_EQUAL = 'NOT_EQUAL'


class DisableRollback(RootModel[bool]):
    root: bool


class DriftedStackInstancesCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class EnableTerminationProtection(RootModel[bool]):
    root: bool


class ErrorCode(RootModel[constr(min_length=3, max_length=3)]):
    root: constr(min_length=3, max_length=3)


class ErrorMessage(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class EvaluationType(Enum):
    Static = 'Static'
    Dynamic = 'Dynamic'


class EventId(RootModel[str]):
    root: str


class ExecuteChangeSetOutput(BaseModel):
    pass


class ExecutionRoleName(
    RootModel[constr(pattern=r'[a-zA-Z_0-9+=,.@-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z_0-9+=,.@-]+', min_length=1, max_length=64)


class ExecutionStatus(Enum):
    UNAVAILABLE = 'UNAVAILABLE'
    AVAILABLE = 'AVAILABLE'
    EXECUTE_IN_PROGRESS = 'EXECUTE_IN_PROGRESS'
    EXECUTE_COMPLETE = 'EXECUTE_COMPLETE'
    EXECUTE_FAILED = 'EXECUTE_FAILED'
    OBSOLETE = 'OBSOLETE'


class ExportName(RootModel[str]):
    root: str


class ExportValue(RootModel[str]):
    root: str


class FailedStackInstancesCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class FailureToleranceCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class FailureTolerancePercentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class HandlerErrorCode(Enum):
    NotUpdatable = 'NotUpdatable'
    InvalidRequest = 'InvalidRequest'
    AccessDenied = 'AccessDenied'
    InvalidCredentials = 'InvalidCredentials'
    AlreadyExists = 'AlreadyExists'
    NotFound = 'NotFound'
    ResourceConflict = 'ResourceConflict'
    Throttling = 'Throttling'
    ServiceLimitExceeded = 'ServiceLimitExceeded'
    NotStabilized = 'NotStabilized'
    GeneralServiceException = 'GeneralServiceException'
    ServiceInternalError = 'ServiceInternalError'
    NetworkFailure = 'NetworkFailure'
    InternalFailure = 'InternalFailure'
    InvalidTypeConfiguration = 'InvalidTypeConfiguration'
    HandlerInternalFailure = 'HandlerInternalFailure'
    NonCompliant = 'NonCompliant'
    Unknown = 'Unknown'
    UnsupportedTarget = 'UnsupportedTarget'


class HookFailureMode(Enum):
    FAIL = 'FAIL'
    WARN = 'WARN'


class HookInvocationCount(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class HookInvocationPoint(Enum):
    PRE_PROVISION = 'PRE_PROVISION'


class HookStatus(Enum):
    HOOK_IN_PROGRESS = 'HOOK_IN_PROGRESS'
    HOOK_COMPLETE_SUCCEEDED = 'HOOK_COMPLETE_SUCCEEDED'
    HOOK_COMPLETE_FAILED = 'HOOK_COMPLETE_FAILED'
    HOOK_FAILED = 'HOOK_FAILED'


class HookStatusReason(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class HookTargetType(Enum):
    RESOURCE = 'RESOURCE'


class HookTargetTypeName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]{2,64}::[a-zA-Z0-9]{2,64}::[a-zA-Z0-9]{2,64}$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^[a-zA-Z0-9]{2,64}::[a-zA-Z0-9]{2,64}::[a-zA-Z0-9]{2,64}$',
        min_length=1,
        max_length=256,
    )


class HookType(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class HookTypeConfigurationVersionId(
    RootModel[constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)


class HookTypeName(RootModel[constr(min_length=10, max_length=196)]):
    root: constr(min_length=10, max_length=196)


class HookTypeVersionId(
    RootModel[constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)


class IdentityProvider(Enum):
    AWS_Marketplace = 'AWS_Marketplace'
    GitHub = 'GitHub'
    Bitbucket = 'Bitbucket'


class ImportStacksToStackSetOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class InProgressStackInstancesCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class InSyncStackInstancesCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class IncludeNestedStacks(RootModel[bool]):
    root: bool


class InsufficientCapabilitiesException(RootModel[Any]):
    root: Any


class InvalidChangeSetStatusException(RootModel[Any]):
    root: Any


class InvalidOperationException(RootModel[Any]):
    root: Any


class InvalidStateTransitionException(RootModel[Any]):
    root: Any


class IsActivated(RootModel[bool]):
    root: bool


class IsDefaultConfiguration(RootModel[bool]):
    root: bool


class IsDefaultVersion(RootModel[bool]):
    root: bool


class Key(RootModel[str]):
    root: str


class LastUpdatedTime(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class LimitName(RootModel[str]):
    root: str


class LimitValue(RootModel[int]):
    root: int


class LogGroupName(
    RootModel[constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\.\-_/#A-Za-z0-9]+', min_length=1, max_length=512)


class LogicalIdHierarchy(RootModel[str]):
    root: str


class LogicalResourceId(RootModel[str]):
    root: str


class LogicalResourceIds(RootModel[List[LogicalResourceId]]):
    root: List[LogicalResourceId] = Field(..., max_length=200, min_length=1)


class MajorVersion(RootModel[conint(ge=1, le=100000)]):
    root: conint(ge=1, le=100000)


class ManagedExecutionNullable(RootModel[bool]):
    root: bool


class MaxConcurrentCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxConcurrentPercentage(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Metadata(RootModel[str]):
    root: str


class MonitoringTimeInMinutes(RootModel[conint(ge=0, le=180)]):
    root: conint(ge=0, le=180)


class NameAlreadyExistsException(RootModel[Any]):
    root: Any


class NextToken(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class NoEcho(RootModel[bool]):
    root: bool


class NotificationARN(RootModel[str]):
    root: str


class NotificationARNs(RootModel[List[NotificationARN]]):
    root: List[NotificationARN] = Field(..., max_length=5)


class OnFailure(Enum):
    DO_NOTHING = 'DO_NOTHING'
    ROLLBACK = 'ROLLBACK'
    DELETE = 'DELETE'


class OperationIdAlreadyExistsException(RootModel[Any]):
    root: Any


class OperationInProgressException(RootModel[Any]):
    root: Any


class OperationNotFoundException(RootModel[Any]):
    root: Any


class OperationResultFilterName(Enum):
    OPERATION_RESULT_STATUS = 'OPERATION_RESULT_STATUS'


class OperationResultFilterValues(
    RootModel[constr(pattern=r'^\S{6,9}$', min_length=6, max_length=9)]
):
    root: constr(pattern=r'^\S{6,9}$', min_length=6, max_length=9)


class OperationStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class OperationStatusCheckFailedException(RootModel[Any]):
    root: Any


class OptionalSecureUrl(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class OrganizationalUnitId(
    RootModel[constr(pattern=r'^(ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}|r-[a-z0-9]{4,32})$')]
):
    root: constr(pattern=r'^(ou-[a-z0-9]{4,32}-[a-z0-9]{8,32}|r-[a-z0-9]{4,32})$')


class OrganizationalUnitIdList(RootModel[List[OrganizationalUnitId]]):
    root: List[OrganizationalUnitId]


class OutputKey(RootModel[str]):
    root: str


class OutputValue(RootModel[str]):
    root: str


class ParameterConstraints(BaseModel):
    AllowedValues_1: Optional[AllowedValues] = Field(None, alias='AllowedValues')


class ParameterKey(RootModel[str]):
    root: str


class ParameterType(RootModel[str]):
    root: str


class ParameterValue(RootModel[str]):
    root: str


class PermissionModels(Enum):
    SERVICE_MANAGED = 'SERVICE_MANAGED'
    SELF_MANAGED = 'SELF_MANAGED'


class PhysicalResourceId(RootModel[str]):
    root: str


class PrivateTypeArn(
    RootModel[
        constr(
            pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:[0-9]{12}:type/.+',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:[0-9]{12}:type/.+',
        max_length=1024,
    )


class Properties(RootModel[str]):
    root: str


class PropertyName(RootModel[str]):
    root: str


class PropertyPath(RootModel[str]):
    root: str


class PropertyValue(RootModel[str]):
    root: str


class ProvisioningType(Enum):
    NON_PROVISIONABLE = 'NON_PROVISIONABLE'
    IMMUTABLE = 'IMMUTABLE'
    FULLY_MUTABLE = 'FULLY_MUTABLE'


class PublicVersionNumber(
    RootModel[constr(pattern=r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(.*)$', min_length=5)]
):
    root: constr(pattern=r'^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(.*)$', min_length=5)


class PublisherId(
    RootModel[constr(pattern=r'[0-9a-zA-Z]{12,40}', min_length=1, max_length=40)]
):
    root: constr(pattern=r'[0-9a-zA-Z]{12,40}', min_length=1, max_length=40)


class PublisherName(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=100)


class PublisherProfile(
    RootModel[constr(pattern=r'(http:|https:)+[^\s]+[\w]', max_length=1024)]
):
    root: constr(pattern=r'(http:|https:)+[^\s]+[\w]', max_length=1024)


class PublisherStatus(Enum):
    VERIFIED = 'VERIFIED'
    UNVERIFIED = 'UNVERIFIED'


class Reason(RootModel[str]):
    root: str


class RecordHandlerProgressOutput(BaseModel):
    pass


class Region(RootModel[constr(pattern=r'^[a-zA-Z0-9-]{1,128}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9-]{1,128}$')


class RegionConcurrencyType(Enum):
    SEQUENTIAL = 'SEQUENTIAL'
    PARALLEL = 'PARALLEL'


class RegionList(RootModel[List[Region]]):
    root: List[Region]


class RegisterPublisherInput(BaseModel):
    AcceptTermsAndConditions_1: Optional[AcceptTermsAndConditions] = Field(
        None, alias='AcceptTermsAndConditions'
    )
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')


class RegisterPublisherOutput(BaseModel):
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')


class RegistrationStatus(Enum):
    COMPLETE = 'COMPLETE'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'


class RegistrationToken(
    RootModel[constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)


class RegistrationTokenList(RootModel[List[RegistrationToken]]):
    root: List[RegistrationToken]


class RegistryType(Enum):
    RESOURCE = 'RESOURCE'
    MODULE = 'MODULE'
    HOOK = 'HOOK'


class Replacement(Enum):
    True_ = 'True'
    False_ = 'False'
    Conditional = 'Conditional'


class RequestToken(
    RootModel[constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9][-a-zA-Z0-9]*', min_length=1, max_length=128)


class RequiresRecreation(Enum):
    Never = 'Never'
    Conditionally = 'Conditionally'
    Always = 'Always'


class ResourceAttribute(Enum):
    Properties = 'Properties'
    Metadata = 'Metadata'
    CreationPolicy = 'CreationPolicy'
    UpdatePolicy = 'UpdatePolicy'
    DeletionPolicy = 'DeletionPolicy'
    Tags = 'Tags'


class ResourceIdentifierPropertyKey(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ResourceIdentifierPropertyValue(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ResourceIdentifiers(RootModel[List[ResourceIdentifierPropertyKey]]):
    root: List[ResourceIdentifierPropertyKey]


class ResourceModel(RootModel[constr(min_length=1, max_length=16384)]):
    root: constr(min_length=1, max_length=16384)


class ResourceProperties(RootModel[str]):
    root: str


class ResourceSignalStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


class ResourceSignalUniqueId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_SKIPPED = 'DELETE_SKIPPED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    IMPORT_FAILED = 'IMPORT_FAILED'
    IMPORT_COMPLETE = 'IMPORT_COMPLETE'
    IMPORT_IN_PROGRESS = 'IMPORT_IN_PROGRESS'
    IMPORT_ROLLBACK_IN_PROGRESS = 'IMPORT_ROLLBACK_IN_PROGRESS'
    IMPORT_ROLLBACK_FAILED = 'IMPORT_ROLLBACK_FAILED'
    IMPORT_ROLLBACK_COMPLETE = 'IMPORT_ROLLBACK_COMPLETE'
    UPDATE_ROLLBACK_IN_PROGRESS = 'UPDATE_ROLLBACK_IN_PROGRESS'
    UPDATE_ROLLBACK_COMPLETE = 'UPDATE_ROLLBACK_COMPLETE'
    UPDATE_ROLLBACK_FAILED = 'UPDATE_ROLLBACK_FAILED'
    ROLLBACK_IN_PROGRESS = 'ROLLBACK_IN_PROGRESS'
    ROLLBACK_COMPLETE = 'ROLLBACK_COMPLETE'
    ROLLBACK_FAILED = 'ROLLBACK_FAILED'


class ResourceStatusReason(RootModel[str]):
    root: str


class ResourceTargetDefinition(BaseModel):
    Attribute: Optional[ResourceAttribute] = None
    Name: Optional[PropertyName] = None
    RequiresRecreation_1: Optional[RequiresRecreation] = Field(
        None, alias='RequiresRecreation'
    )


class ResourceToSkip(
    RootModel[constr(pattern=r'[a-zA-Z0-9]+|[a-zA-Z][-a-zA-Z0-9]*\.[a-zA-Z0-9]+')]
):
    root: constr(pattern=r'[a-zA-Z0-9]+|[a-zA-Z][-a-zA-Z0-9]*\.[a-zA-Z0-9]+')


class ResourceType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ResourceTypes(RootModel[List[ResourceType]]):
    root: List[ResourceType]


class ResourcesToSkip(RootModel[List[ResourceToSkip]]):
    root: List[ResourceToSkip]


class RetainResources(RootModel[List[LogicalResourceId]]):
    root: List[LogicalResourceId]


class RetainStacks(RootModel[bool]):
    root: bool


class RetainStacksNullable(RootModel[bool]):
    root: bool


class RetainStacksOnAccountRemovalNullable(RootModel[bool]):
    root: bool


class RoleARN(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class RoleArn(
    RootModel[
        constr(pattern=r'arn:.+:iam::[0-9]{12}:role/.+', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'arn:.+:iam::[0-9]{12}:role/.+', min_length=1, max_length=256)


class S3Bucket(RootModel[constr(pattern=r'[\s\S]+', min_length=3, max_length=63)]):
    root: constr(pattern=r'[\s\S]+', min_length=3, max_length=63)


class S3Url(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class Scope(RootModel[List[ResourceAttribute]]):
    root: List[ResourceAttribute]


class SetTypeDefaultVersionOutput(BaseModel):
    pass


class StackDriftDetectionId(RootModel[constr(min_length=1, max_length=36)]):
    root: constr(min_length=1, max_length=36)


class StackDriftDetectionStatus(Enum):
    DETECTION_IN_PROGRESS = 'DETECTION_IN_PROGRESS'
    DETECTION_FAILED = 'DETECTION_FAILED'
    DETECTION_COMPLETE = 'DETECTION_COMPLETE'


class StackDriftDetectionStatusReason(RootModel[str]):
    root: str


class StackDriftStatus(Enum):
    DRIFTED = 'DRIFTED'
    IN_SYNC = 'IN_SYNC'
    UNKNOWN = 'UNKNOWN'
    NOT_CHECKED = 'NOT_CHECKED'


class StackId(RootModel[str]):
    root: str


class StackIdList(RootModel[List[StackId]]):
    root: List[StackId]


class StackIdsUrl(
    RootModel[constr(pattern=r'(s3://|http(s?)://).+', min_length=1, max_length=5120)]
):
    root: constr(pattern=r'(s3://|http(s?)://).+', min_length=1, max_length=5120)


class StackInstanceDetailedStatus(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    INOPERABLE = 'INOPERABLE'


class StackInstanceFilterName(Enum):
    DETAILED_STATUS = 'DETAILED_STATUS'
    LAST_OPERATION_ID = 'LAST_OPERATION_ID'


class StackInstanceFilterValues(
    RootModel[constr(pattern=r'^\S{1,128}$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^\S{1,128}$', min_length=1, max_length=128)


class StackInstanceNotFoundException(RootModel[Any]):
    root: Any


class StackInstanceStatus(Enum):
    CURRENT = 'CURRENT'
    OUTDATED = 'OUTDATED'
    INOPERABLE = 'INOPERABLE'


class StackName(RootModel[str]):
    root: str


class StackNameOrId(
    RootModel[
        constr(
            pattern=r'([a-zA-Z][-a-zA-Z0-9]*)|(arn:\b(aws|aws-us-gov|aws-cn)\b:[-a-zA-Z0-9:/._+]*)',
            min_length=1,
        )
    ]
):
    root: constr(
        pattern=r'([a-zA-Z][-a-zA-Z0-9]*)|(arn:\b(aws|aws-us-gov|aws-cn)\b:[-a-zA-Z0-9:/._+]*)',
        min_length=1,
    )


class StackNotFoundException(RootModel[Any]):
    root: Any


class StackPolicyBody(RootModel[constr(min_length=1, max_length=16384)]):
    root: constr(min_length=1, max_length=16384)


class StackPolicyDuringUpdateBody(RootModel[constr(min_length=1, max_length=16384)]):
    root: constr(min_length=1, max_length=16384)


class StackPolicyDuringUpdateURL(RootModel[constr(min_length=1, max_length=1350)]):
    root: constr(min_length=1, max_length=1350)


class StackPolicyURL(RootModel[constr(min_length=1, max_length=1350)]):
    root: constr(min_length=1, max_length=1350)


class StackResourceDriftStatus(Enum):
    IN_SYNC = 'IN_SYNC'
    MODIFIED = 'MODIFIED'
    DELETED = 'DELETED'
    NOT_CHECKED = 'NOT_CHECKED'


class StackResourceDriftStatusFilters(RootModel[List[StackResourceDriftStatus]]):
    root: List[StackResourceDriftStatus] = Field(..., max_length=4, min_length=1)


class StackSetARN(RootModel[str]):
    root: str


class StackSetDriftDetectionStatus(Enum):
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    IN_PROGRESS = 'IN_PROGRESS'
    STOPPED = 'STOPPED'


class StackSetDriftStatus(Enum):
    DRIFTED = 'DRIFTED'
    IN_SYNC = 'IN_SYNC'
    NOT_CHECKED = 'NOT_CHECKED'


class StackSetId(RootModel[str]):
    root: str


class StackSetName(RootModel[str]):
    root: str


class StackSetNameOrId(
    RootModel[
        constr(
            pattern=r'[a-zA-Z][-a-zA-Z0-9]*(?::[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})?'
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z][-a-zA-Z0-9]*(?::[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})?'
    )


class StackSetNotEmptyException(RootModel[Any]):
    root: Any


class StackSetNotFoundException(RootModel[Any]):
    root: Any


class StackSetOperationAction(Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    DETECT_DRIFT = 'DETECT_DRIFT'


class StackSetOperationPreferences(BaseModel):
    FailureToleranceCount_1: Optional[FailureToleranceCount] = Field(
        None, alias='FailureToleranceCount'
    )
    FailureTolerancePercentage_1: Optional[FailureTolerancePercentage] = Field(
        None, alias='FailureTolerancePercentage'
    )
    MaxConcurrentCount_1: Optional[MaxConcurrentCount] = Field(
        None, alias='MaxConcurrentCount'
    )
    MaxConcurrentPercentage_1: Optional[MaxConcurrentPercentage] = Field(
        None, alias='MaxConcurrentPercentage'
    )
    RegionConcurrencyType_1: Optional[RegionConcurrencyType] = Field(
        None, alias='RegionConcurrencyType'
    )
    RegionOrder: Optional[RegionList] = None


class StackSetOperationResultStatus(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class StackSetOperationStatus(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'
    QUEUED = 'QUEUED'


class StackSetOperationStatusDetails(BaseModel):
    FailedStackInstancesCount_1: Optional[FailedStackInstancesCount] = Field(
        None, alias='FailedStackInstancesCount'
    )


class StackSetOperationStatusReason(RootModel[str]):
    root: str


class StackSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'


class StackStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    ROLLBACK_IN_PROGRESS = 'ROLLBACK_IN_PROGRESS'
    ROLLBACK_FAILED = 'ROLLBACK_FAILED'
    ROLLBACK_COMPLETE = 'ROLLBACK_COMPLETE'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_COMPLETE_CLEANUP_IN_PROGRESS = 'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED = 'UPDATE_FAILED'
    UPDATE_ROLLBACK_IN_PROGRESS = 'UPDATE_ROLLBACK_IN_PROGRESS'
    UPDATE_ROLLBACK_FAILED = 'UPDATE_ROLLBACK_FAILED'
    UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS = (
        'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS'
    )
    UPDATE_ROLLBACK_COMPLETE = 'UPDATE_ROLLBACK_COMPLETE'
    REVIEW_IN_PROGRESS = 'REVIEW_IN_PROGRESS'
    IMPORT_IN_PROGRESS = 'IMPORT_IN_PROGRESS'
    IMPORT_COMPLETE = 'IMPORT_COMPLETE'
    IMPORT_ROLLBACK_IN_PROGRESS = 'IMPORT_ROLLBACK_IN_PROGRESS'
    IMPORT_ROLLBACK_FAILED = 'IMPORT_ROLLBACK_FAILED'
    IMPORT_ROLLBACK_COMPLETE = 'IMPORT_ROLLBACK_COMPLETE'


class StackStatusFilter(RootModel[List[StackStatus]]):
    root: List[StackStatus]


class StackStatusReason(RootModel[str]):
    root: str


class StaleRequestException(RootModel[Any]):
    root: Any


class StatusMessage(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class StopStackSetOperationInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    OperationId: ClientRequestToken
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class StopStackSetOperationOutput(BaseModel):
    pass


class SupportedMajorVersion(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class SupportedMajorVersions(RootModel[List[SupportedMajorVersion]]):
    root: List[SupportedMajorVersion]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TemplateBody(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class TemplateDescription(RootModel[str]):
    root: str


class TemplateParameter(BaseModel):
    DefaultValue: Optional[ParameterValue] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    NoEcho_1: Optional[NoEcho] = Field(None, alias='NoEcho')
    ParameterKey_1: Optional[ParameterKey] = Field(None, alias='ParameterKey')


class TemplateParameters(RootModel[List[TemplateParameter]]):
    root: List[TemplateParameter]


class TemplateStage(Enum):
    Original = 'Original'
    Processed = 'Processed'


class TemplateURL(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ThirdPartyType(Enum):
    RESOURCE = 'RESOURCE'
    MODULE = 'MODULE'
    HOOK = 'HOOK'


class ThirdPartyTypeArn(
    RootModel[
        constr(
            pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}::type/.+/[0-9a-zA-Z]{12,40}/.+',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}::type/.+/[0-9a-zA-Z]{12,40}/.+',
        max_length=1024,
    )


class TimeoutMinutes(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Timestamp(RootModel[datetime]):
    root: datetime


class TokenAlreadyExistsException(RootModel[Any]):
    root: Any


class TotalStackInstancesCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class TransformName(RootModel[str]):
    root: str


class TransformsList(RootModel[List[TransformName]]):
    root: List[TransformName]


class Type(RootModel[str]):
    root: str


class TypeArn(
    RootModel[
        constr(
            pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/.+',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type/.+',
        max_length=1024,
    )


class TypeConfiguration(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=204800)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=204800)


class TypeConfigurationAlias(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]{1,256}$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]{1,256}$', min_length=1, max_length=256)


class TypeConfigurationArn(
    RootModel[
        constr(
            pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type-configuration/.+',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[A-Za-z0-9-]{0,64}:cloudformation:[A-Za-z0-9-]{1,64}:([0-9]{12})?:type-configuration/.+',
        max_length=1024,
    )


class TypeConfigurationNotFoundException(RootModel[Any]):
    root: Any


class TypeHierarchy(RootModel[str]):
    root: str


class TypeName(
    RootModel[
        constr(
            pattern=r'[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}(::MODULE){0,1}',
            min_length=10,
            max_length=204,
        )
    ]
):
    root: constr(
        pattern=r'[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}(::MODULE){0,1}',
        min_length=10,
        max_length=204,
    )


class TypeNamePrefix(
    RootModel[
        constr(
            pattern=r'([A-Za-z0-9]{2,64}::){0,2}([A-Za-z0-9]{2,64}:?){0,1}',
            min_length=1,
            max_length=204,
        )
    ]
):
    root: constr(
        pattern=r'([A-Za-z0-9]{2,64}::){0,2}([A-Za-z0-9]{2,64}:?){0,1}',
        min_length=1,
        max_length=204,
    )


class TypeNotFoundException(RootModel[Any]):
    root: Any


class TypeSchema(RootModel[constr(min_length=1, max_length=16777216)]):
    root: constr(min_length=1, max_length=16777216)


class TypeTestsStatus(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'
    NOT_TESTED = 'NOT_TESTED'


class TypeTestsStatusDescription(
    RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=1024)


class TypeVersionId(
    RootModel[constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)


class TypeVersionSummary(BaseModel):
    Arn: Optional[TypeArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    IsDefaultVersion_1: Optional[IsDefaultVersion] = Field(
        None, alias='IsDefaultVersion'
    )
    PublicVersionNumber_1: Optional[PublicVersionNumber] = Field(
        None, alias='PublicVersionNumber'
    )
    TimeCreated: Optional[Timestamp] = None
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    VersionId: Optional[TypeVersionId] = None


class UpdateStackInstancesOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class UpdateStackOutput(BaseModel):
    StackId_1: Optional[StackId] = Field(None, alias='StackId')


class UpdateStackSetOutput(BaseModel):
    OperationId: Optional[ClientRequestToken] = None


class UpdateTerminationProtectionInput(BaseModel):
    EnableTerminationProtection_1: EnableTerminationProtection = Field(
        ..., alias='EnableTerminationProtection'
    )
    StackName: StackNameOrId


class UpdateTerminationProtectionOutput(BaseModel):
    StackId_1: Optional[StackId] = Field(None, alias='StackId')


class Url(RootModel[str]):
    root: str


class UsePreviousTemplate(RootModel[bool]):
    root: bool


class UsePreviousValue(RootModel[bool]):
    root: bool


class ValidateTemplateInput(BaseModel):
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')


class Value(RootModel[str]):
    root: str


class Version(RootModel[str]):
    root: str


class VersionBump(Enum):
    MAJOR = 'MAJOR'
    MINOR = 'MINOR'


class Visibility(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class Type1(Enum):
    RESOURCE = 'RESOURCE'
    MODULE = 'MODULE'
    HOOK = 'HOOK'


class LoggingConfig(BaseModel):
    LogGroupName_1: LogGroupName = Field(..., alias='LogGroupName')
    LogRoleArn: RoleArn


class Action(Enum):
    ActivateType = 'ActivateType'


class Version1(Enum):
    field_2010_05_15 = '2010-05-15'


class Action4(Enum):
    BatchDescribeTypeConfigurations = 'BatchDescribeTypeConfigurations'


class Action8(Enum):
    CancelUpdateStack = 'CancelUpdateStack'


class Action12(Enum):
    ContinueUpdateRollback = 'ContinueUpdateRollback'


class Action16(Enum):
    CreateChangeSet = 'CreateChangeSet'


class Capabilities(RootModel[List[Capability]]):
    root: List[Capability]


class Action20(Enum):
    CreateStack = 'CreateStack'


class DeploymentTargets(BaseModel):
    AccountFilterType_1: Optional[AccountFilterType] = Field(
        None, alias='AccountFilterType'
    )
    Accounts: Optional[AccountList] = None
    AccountsUrl_1: Optional[AccountsUrl] = Field(None, alias='AccountsUrl')
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None


class OperationPreferences(BaseModel):
    FailureToleranceCount_1: Optional[FailureToleranceCount] = Field(
        None, alias='FailureToleranceCount'
    )
    FailureTolerancePercentage_1: Optional[FailureTolerancePercentage] = Field(
        None, alias='FailureTolerancePercentage'
    )
    MaxConcurrentCount_1: Optional[MaxConcurrentCount] = Field(
        None, alias='MaxConcurrentCount'
    )
    MaxConcurrentPercentage_1: Optional[MaxConcurrentPercentage] = Field(
        None, alias='MaxConcurrentPercentage'
    )
    RegionConcurrencyType_1: Optional[RegionConcurrencyType] = Field(
        None, alias='RegionConcurrencyType'
    )
    RegionOrder: Optional[RegionList] = None


class Action24(Enum):
    CreateStackInstances = 'CreateStackInstances'


class Accounts(RootModel[List[Account]]):
    root: List[Account]


class Regions(RootModel[List[Region]]):
    root: List[Region]


class PermissionModel(Enum):
    SERVICE_MANAGED = 'SERVICE_MANAGED'
    SELF_MANAGED = 'SELF_MANAGED'


class AutoDeployment(BaseModel):
    Enabled: Optional[AutoDeploymentNullable] = None
    RetainStacksOnAccountRemoval: Optional[RetainStacksOnAccountRemovalNullable] = None


class ManagedExecution(BaseModel):
    Active: Optional[ManagedExecutionNullable] = None


class Action28(Enum):
    CreateStackSet = 'CreateStackSet'


class Action32(Enum):
    DeactivateType = 'DeactivateType'


class Action36(Enum):
    DeleteChangeSet = 'DeleteChangeSet'


class Action40(Enum):
    DeleteStack = 'DeleteStack'


class Action44(Enum):
    DeleteStackInstances = 'DeleteStackInstances'


class Action48(Enum):
    DeleteStackSet = 'DeleteStackSet'


class Action52(Enum):
    DeregisterType = 'DeregisterType'


class Action56(Enum):
    DescribeAccountLimits = 'DescribeAccountLimits'


class Action60(Enum):
    DescribeChangeSet = 'DescribeChangeSet'


class Action64(Enum):
    DescribeChangeSetHooks = 'DescribeChangeSetHooks'


class Action68(Enum):
    DescribePublisher = 'DescribePublisher'


class Action72(Enum):
    DescribeStackDriftDetectionStatus = 'DescribeStackDriftDetectionStatus'


class Action76(Enum):
    DescribeStackEvents = 'DescribeStackEvents'


class Action80(Enum):
    DescribeStackInstance = 'DescribeStackInstance'


class Action84(Enum):
    DescribeStackResource = 'DescribeStackResource'


class Action88(Enum):
    DescribeStackResourceDrifts = 'DescribeStackResourceDrifts'


class Action92(Enum):
    DescribeStackResources = 'DescribeStackResources'


class Action96(Enum):
    DescribeStackSet = 'DescribeStackSet'


class Action100(Enum):
    DescribeStackSetOperation = 'DescribeStackSetOperation'


class Action104(Enum):
    DescribeStacks = 'DescribeStacks'


class Action108(Enum):
    DescribeType = 'DescribeType'


class Action112(Enum):
    DescribeTypeRegistration = 'DescribeTypeRegistration'


class Action116(Enum):
    DetectStackDrift = 'DetectStackDrift'


class Action120(Enum):
    DetectStackResourceDrift = 'DetectStackResourceDrift'


class Action124(Enum):
    DetectStackSetDrift = 'DetectStackSetDrift'


class Action128(Enum):
    EstimateTemplateCost = 'EstimateTemplateCost'


class Action132(Enum):
    ExecuteChangeSet = 'ExecuteChangeSet'


class Action136(Enum):
    GetStackPolicy = 'GetStackPolicy'


class Action140(Enum):
    GetTemplate = 'GetTemplate'


class Action144(Enum):
    GetTemplateSummary = 'GetTemplateSummary'


class Action148(Enum):
    ImportStacksToStackSet = 'ImportStacksToStackSet'


class StackIds(RootModel[List[StackId]]):
    root: List[StackId]


class OrganizationalUnitIds(RootModel[List[OrganizationalUnitId]]):
    root: List[OrganizationalUnitId]


class Action152(Enum):
    ListChangeSets = 'ListChangeSets'


class Action156(Enum):
    ListExports = 'ListExports'


class Action160(Enum):
    ListImports = 'ListImports'


class Action164(Enum):
    ListStackInstances = 'ListStackInstances'


class Action168(Enum):
    ListStackResources = 'ListStackResources'


class Action172(Enum):
    ListStackSetOperationResults = 'ListStackSetOperationResults'


class Action176(Enum):
    ListStackSetOperations = 'ListStackSetOperations'


class Status(Enum):
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'


class Action180(Enum):
    ListStackSets = 'ListStackSets'


class Action184(Enum):
    ListStacks = 'ListStacks'


class RegistrationStatusFilter(Enum):
    COMPLETE = 'COMPLETE'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'


class Action188(Enum):
    ListTypeRegistrations = 'ListTypeRegistrations'


class Action192(Enum):
    ListTypeVersions = 'ListTypeVersions'


class Filters2(BaseModel):
    Category_1: Optional[Category] = Field(None, alias='Category')
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    TypeNamePrefix_1: Optional[TypeNamePrefix] = Field(None, alias='TypeNamePrefix')


class Action196(Enum):
    ListTypes = 'ListTypes'


class Action200(Enum):
    PublishType = 'PublishType'


class CurrentOperationStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class ErrorCode1(Enum):
    NotUpdatable = 'NotUpdatable'
    InvalidRequest = 'InvalidRequest'
    AccessDenied = 'AccessDenied'
    InvalidCredentials = 'InvalidCredentials'
    AlreadyExists = 'AlreadyExists'
    NotFound = 'NotFound'
    ResourceConflict = 'ResourceConflict'
    Throttling = 'Throttling'
    ServiceLimitExceeded = 'ServiceLimitExceeded'
    NotStabilized = 'NotStabilized'
    GeneralServiceException = 'GeneralServiceException'
    ServiceInternalError = 'ServiceInternalError'
    NetworkFailure = 'NetworkFailure'
    InternalFailure = 'InternalFailure'
    InvalidTypeConfiguration = 'InvalidTypeConfiguration'
    HandlerInternalFailure = 'HandlerInternalFailure'
    NonCompliant = 'NonCompliant'
    Unknown = 'Unknown'
    UnsupportedTarget = 'UnsupportedTarget'


class Action204(Enum):
    RecordHandlerProgress = 'RecordHandlerProgress'


class Action208(Enum):
    RegisterPublisher = 'RegisterPublisher'


class Action212(Enum):
    RegisterType = 'RegisterType'


class Action216(Enum):
    RollbackStack = 'RollbackStack'


class Action220(Enum):
    SetStackPolicy = 'SetStackPolicy'


class Action224(Enum):
    SetTypeConfiguration = 'SetTypeConfiguration'


class Action228(Enum):
    SetTypeDefaultVersion = 'SetTypeDefaultVersion'


class Status2(Enum):
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'


class Action232(Enum):
    SignalResource = 'SignalResource'


class Action236(Enum):
    StopStackSetOperation = 'StopStackSetOperation'


class Action240(Enum):
    TestType = 'TestType'


class Action244(Enum):
    UpdateStack = 'UpdateStack'


class Action248(Enum):
    UpdateStackInstances = 'UpdateStackInstances'


class Action252(Enum):
    UpdateStackSet = 'UpdateStackSet'


class Action256(Enum):
    UpdateTerminationProtection = 'UpdateTerminationProtection'


class Action260(Enum):
    ValidateTemplate = 'ValidateTemplate'


class AccountGateResult(BaseModel):
    Status: Optional[AccountGateStatus] = None
    StatusReason: Optional[AccountGateStatusReason] = None


class AccountLimit(BaseModel):
    Name: Optional[LimitName] = None
    Value: Optional[LimitValue] = None


class AccountLimitList(RootModel[List[AccountLimit]]):
    root: List[AccountLimit]


class ActivateTypeOutput(BaseModel):
    Arn: Optional[PrivateTypeArn] = None


class CancelUpdateStackInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    StackName_1: StackName = Field(..., alias='StackName')


class ChangeSetHookResourceTargetDetails(BaseModel):
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    ResourceAction: Optional[ChangeAction] = None
    ResourceType: Optional[HookTargetTypeName] = None


class ChangeSetHookTargetDetails(BaseModel):
    ResourceTargetDetails: Optional[ChangeSetHookResourceTargetDetails] = None
    TargetType: Optional[HookTargetType] = None


class ChangeSetSummary(BaseModel):
    ChangeSetId_1: Optional[ChangeSetId] = Field(None, alias='ChangeSetId')
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExecutionStatus_1: Optional[ExecutionStatus] = Field(None, alias='ExecutionStatus')
    IncludeNestedStacks_1: Optional[IncludeNestedStacks] = Field(
        None, alias='IncludeNestedStacks'
    )
    ParentChangeSetId: Optional[ChangeSetId] = None
    RootChangeSetId: Optional[ChangeSetId] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')
    Status: Optional[ChangeSetStatus] = None
    StatusReason: Optional[ChangeSetStatusReason] = None


class ContinueUpdateRollbackInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ResourcesToSkip_1: Optional[ResourcesToSkip] = Field(None, alias='ResourcesToSkip')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    StackName: StackNameOrId


class CreateChangeSetOutput(BaseModel):
    Id: Optional[ChangeSetId] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')


class CreateStackOutput(BaseModel):
    StackId_1: Optional[StackId] = Field(None, alias='StackId')


class CreateStackSetOutput(BaseModel):
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')


class DeactivateTypeInput(BaseModel):
    Arn: Optional[PrivateTypeArn] = None
    Type: Optional[ThirdPartyType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class DeleteChangeSetInput(BaseModel):
    ChangeSetName: ChangeSetNameOrId
    StackName: Optional[StackNameOrId] = None


class DeleteStackInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    RetainResources_1: Optional[RetainResources] = Field(None, alias='RetainResources')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    StackName_1: StackName = Field(..., alias='StackName')


class DeleteStackSetInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class DeregisterTypeInput(BaseModel):
    Arn: Optional[PrivateTypeArn] = None
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    VersionId: Optional[TypeVersionId] = None


class DescribeAccountLimitsInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAccountLimitsOutput(BaseModel):
    AccountLimits: Optional[AccountLimitList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeChangeSetHooksInput(BaseModel):
    ChangeSetName: ChangeSetNameOrId
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName: Optional[StackNameOrId] = None


class DescribeChangeSetInput(BaseModel):
    ChangeSetName: ChangeSetNameOrId
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName: Optional[StackNameOrId] = None


class DescribePublisherInput(BaseModel):
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')


class DescribePublisherOutput(BaseModel):
    IdentityProvider_1: Optional[IdentityProvider] = Field(
        None, alias='IdentityProvider'
    )
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    PublisherProfile_1: Optional[PublisherProfile] = Field(
        None, alias='PublisherProfile'
    )
    PublisherStatus_1: Optional[PublisherStatus] = Field(None, alias='PublisherStatus')


class DescribeStackDriftDetectionStatusInput(BaseModel):
    StackDriftDetectionId_1: StackDriftDetectionId = Field(
        ..., alias='StackDriftDetectionId'
    )


class DescribeStackDriftDetectionStatusOutput(BaseModel):
    DetectionStatus: StackDriftDetectionStatus
    DetectionStatusReason: Optional[StackDriftDetectionStatusReason] = None
    DriftedStackResourceCount: Optional[BoxedInteger] = None
    StackDriftDetectionId_1: StackDriftDetectionId = Field(
        ..., alias='StackDriftDetectionId'
    )
    StackDriftStatus_1: Optional[StackDriftStatus] = Field(
        None, alias='StackDriftStatus'
    )
    StackId_1: StackId = Field(..., alias='StackId')
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')


class DescribeStackEventsInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')


class DescribeStackInstanceInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    StackInstanceAccount: Account
    StackInstanceRegion: Region
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class DescribeStackResourceDriftsInput(BaseModel):
    MaxResults: Optional[BoxedMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName: StackNameOrId
    StackResourceDriftStatusFilters_1: Optional[StackResourceDriftStatusFilters] = (
        Field(None, alias='StackResourceDriftStatusFilters')
    )


class DescribeStackResourceInput(BaseModel):
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    StackName_1: StackName = Field(..., alias='StackName')


class DescribeStackResourcesInput(BaseModel):
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    StackName_1: Optional[StackName] = Field(None, alias='StackName')


class DescribeStackSetInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class DescribeStackSetOperationInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    OperationId: ClientRequestToken
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class DescribeStacksInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')


class DescribeTypeInput(BaseModel):
    Arn: Optional[TypeArn] = None
    PublicVersionNumber_1: Optional[PublicVersionNumber] = Field(
        None, alias='PublicVersionNumber'
    )
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    VersionId: Optional[TypeVersionId] = None


class DescribeTypeRegistrationInput(BaseModel):
    RegistrationToken_1: RegistrationToken = Field(..., alias='RegistrationToken')


class DescribeTypeRegistrationOutput(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    ProgressStatus: Optional[RegistrationStatus] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeVersionArn: Optional[TypeArn] = None


class DetectStackDriftInput(BaseModel):
    LogicalResourceIds_1: Optional[LogicalResourceIds] = Field(
        None, alias='LogicalResourceIds'
    )
    StackName: StackNameOrId


class DetectStackDriftOutput(BaseModel):
    StackDriftDetectionId_1: StackDriftDetectionId = Field(
        ..., alias='StackDriftDetectionId'
    )


class DetectStackResourceDriftInput(BaseModel):
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    StackName: StackNameOrId


class DetectStackSetDriftInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    StackSetName: StackSetNameOrId


class EstimateTemplateCostOutput(BaseModel):
    Url_1: Optional[Url] = Field(None, alias='Url')


class ExecuteChangeSetInput(BaseModel):
    ChangeSetName: ChangeSetNameOrId
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DisableRollback_1: Optional[DisableRollback] = Field(None, alias='DisableRollback')
    StackName: Optional[StackNameOrId] = None


class Export(BaseModel):
    ExportingStackId: Optional[StackId] = None
    Name: Optional[ExportName] = None
    Value: Optional[ExportValue] = None


class Exports(RootModel[List[Export]]):
    root: List[Export]


class GetStackPolicyInput(BaseModel):
    StackName_1: StackName = Field(..., alias='StackName')


class GetStackPolicyOutput(BaseModel):
    StackPolicyBody_1: Optional[StackPolicyBody] = Field(None, alias='StackPolicyBody')


class GetTemplateInput(BaseModel):
    ChangeSetName: Optional[ChangeSetNameOrId] = None
    StackName_1: Optional[StackName] = Field(None, alias='StackName')
    TemplateStage_1: Optional[TemplateStage] = Field(None, alias='TemplateStage')


class GetTemplateSummaryInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    StackName: Optional[StackNameOrId] = None
    StackSetName: Optional[StackSetNameOrId] = None
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')


class ImportStacksToStackSetInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None
    StackIds: Optional[StackIdList] = None
    StackIdsUrl_1: Optional[StackIdsUrl] = Field(None, alias='StackIdsUrl')
    StackSetName: StackSetNameOrId


class Imports(RootModel[List[StackName]]):
    root: List[StackName]


class ListChangeSetsInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName: StackNameOrId


class ListExportsInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExportsOutput(BaseModel):
    Exports_1: Optional[Exports] = Field(None, alias='Exports')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListImportsInput(BaseModel):
    ExportName_1: ExportName = Field(..., alias='ExportName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListImportsOutput(BaseModel):
    Imports_1: Optional[Imports] = Field(None, alias='Imports')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListStackResourcesInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackName_1: StackName = Field(..., alias='StackName')


class ListStackSetOperationsInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class ListStackSetsInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[StackSetStatus] = None


class ListStacksInput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackStatusFilter_1: Optional[StackStatusFilter] = Field(
        None, alias='StackStatusFilter'
    )


class ListTypeRegistrationsInput(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegistrationStatusFilter: Optional[RegistrationStatus] = None
    Type: Optional[RegistryType] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class ListTypeRegistrationsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegistrationTokenList_1: Optional[RegistrationTokenList] = Field(
        None, alias='RegistrationTokenList'
    )


class ListTypeVersionsInput(BaseModel):
    Arn: Optional[TypeArn] = None
    DeprecatedStatus_1: Optional[DeprecatedStatus] = Field(
        None, alias='DeprecatedStatus'
    )
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class ModuleInfo(BaseModel):
    LogicalIdHierarchy_1: Optional[LogicalIdHierarchy] = Field(
        None, alias='LogicalIdHierarchy'
    )
    TypeHierarchy_1: Optional[TypeHierarchy] = Field(None, alias='TypeHierarchy')


class OperationResultFilter(BaseModel):
    Name: Optional[OperationResultFilterName] = None
    Values: Optional[OperationResultFilterValues] = None


class OperationResultFilters(RootModel[List[OperationResultFilter]]):
    root: List[OperationResultFilter] = Field(..., max_length=1)


class Output(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExportName_1: Optional[ExportName] = Field(None, alias='ExportName')
    OutputKey_1: Optional[OutputKey] = Field(None, alias='OutputKey')
    OutputValue_1: Optional[OutputValue] = Field(None, alias='OutputValue')


class Outputs(RootModel[List[Output]]):
    root: List[Output]


class Parameter(BaseModel):
    ParameterKey_1: Optional[ParameterKey] = Field(None, alias='ParameterKey')
    ParameterValue_1: Optional[ParameterValue] = Field(None, alias='ParameterValue')
    ResolvedValue: Optional[ParameterValue] = None
    UsePreviousValue_1: Optional[UsePreviousValue] = Field(
        None, alias='UsePreviousValue'
    )


class ParameterDeclaration(BaseModel):
    DefaultValue: Optional[ParameterValue] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    NoEcho_1: Optional[NoEcho] = Field(None, alias='NoEcho')
    ParameterConstraints_1: Optional[ParameterConstraints] = Field(
        None, alias='ParameterConstraints'
    )
    ParameterKey_1: Optional[ParameterKey] = Field(None, alias='ParameterKey')
    ParameterType_1: Optional[ParameterType] = Field(None, alias='ParameterType')


class ParameterDeclarations(RootModel[List[ParameterDeclaration]]):
    root: List[ParameterDeclaration]


class Parameters(RootModel[List[Parameter]]):
    root: List[Parameter]


class PhysicalResourceIdContextKeyValuePair(BaseModel):
    Key_1: Key = Field(..., alias='Key')
    Value_1: Value = Field(..., alias='Value')


class PropertyDifference(BaseModel):
    ActualValue: PropertyValue
    DifferenceType_1: DifferenceType = Field(..., alias='DifferenceType')
    ExpectedValue: PropertyValue
    PropertyPath_1: PropertyPath = Field(..., alias='PropertyPath')


class PropertyDifferences(RootModel[List[PropertyDifference]]):
    root: List[PropertyDifference]


class PublishTypeInput(BaseModel):
    Arn: Optional[PrivateTypeArn] = None
    PublicVersionNumber_1: Optional[PublicVersionNumber] = Field(
        None, alias='PublicVersionNumber'
    )
    Type: Optional[ThirdPartyType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class PublishTypeOutput(BaseModel):
    PublicTypeArn: Optional[TypeArn] = None


class RecordHandlerProgressInput(BaseModel):
    BearerToken: ClientToken
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    CurrentOperationStatus: Optional[OperationStatus] = None
    ErrorCode: Optional[HandlerErrorCode] = None
    OperationStatus_1: OperationStatus = Field(..., alias='OperationStatus')
    ResourceModel_1: Optional[ResourceModel] = Field(None, alias='ResourceModel')
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')


class RegisterTypeInput(BaseModel):
    ClientRequestToken: Optional[RequestToken] = None
    ExecutionRoleArn: Optional[RoleArn] = None
    LoggingConfig_1: Optional[LoggingConfig] = Field(None, alias='LoggingConfig')
    SchemaHandlerPackage: S3Url
    Type: Optional[RegistryType] = None
    TypeName_1: TypeName = Field(..., alias='TypeName')


class RegisterTypeOutput(BaseModel):
    RegistrationToken_1: Optional[RegistrationToken] = Field(
        None, alias='RegistrationToken'
    )


class RequiredActivatedType(BaseModel):
    OriginalTypeName: Optional[TypeName] = None
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    SupportedMajorVersions_1: Optional[SupportedMajorVersions] = Field(
        None, alias='SupportedMajorVersions'
    )
    TypeNameAlias: Optional[TypeName] = None


class RequiredActivatedTypes(RootModel[List[RequiredActivatedType]]):
    root: List[RequiredActivatedType]


class ResourceChangeDetail(BaseModel):
    CausingEntity_1: Optional[CausingEntity] = Field(None, alias='CausingEntity')
    ChangeSource_1: Optional[ChangeSource] = Field(None, alias='ChangeSource')
    Evaluation: Optional[EvaluationType] = None
    Target: Optional[ResourceTargetDefinition] = None


class ResourceChangeDetails(RootModel[List[ResourceChangeDetail]]):
    root: List[ResourceChangeDetail]


class ResourceIdentifierProperties(
    RootModel[Optional[Dict[str, ResourceIdentifierPropertyValue]]]
):
    root: Optional[Dict[str, ResourceIdentifierPropertyValue]] = None


class ResourceIdentifierSummary(BaseModel):
    LogicalResourceIds_1: Optional[LogicalResourceIds] = Field(
        None, alias='LogicalResourceIds'
    )
    ResourceIdentifiers_1: Optional[ResourceIdentifiers] = Field(
        None, alias='ResourceIdentifiers'
    )
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ResourceToImport(BaseModel):
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    ResourceIdentifier: ResourceIdentifierProperties
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class ResourcesToImport(RootModel[List[ResourceToImport]]):
    root: List[ResourceToImport] = Field(..., max_length=200)


class RollbackStackInput(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    StackName: StackNameOrId


class RollbackStackOutput(BaseModel):
    StackId_1: Optional[StackId] = Field(None, alias='StackId')


class RollbackTrigger(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Type_1: Type = Field(..., alias='Type')


class RollbackTriggers(RootModel[List[RollbackTrigger]]):
    root: List[RollbackTrigger] = Field(..., max_length=5)


class SetStackPolicyInput(BaseModel):
    StackName_1: StackName = Field(..., alias='StackName')
    StackPolicyBody_1: Optional[StackPolicyBody] = Field(None, alias='StackPolicyBody')
    StackPolicyURL_1: Optional[StackPolicyURL] = Field(None, alias='StackPolicyURL')


class SetTypeConfigurationInput(BaseModel):
    Configuration: TypeConfiguration
    ConfigurationAlias: Optional[TypeConfigurationAlias] = None
    Type: Optional[ThirdPartyType] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class SetTypeConfigurationOutput(BaseModel):
    ConfigurationArn: Optional[TypeConfigurationArn] = None


class SetTypeDefaultVersionInput(BaseModel):
    Arn: Optional[PrivateTypeArn] = None
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    VersionId: Optional[TypeVersionId] = None


class SignalResourceInput(BaseModel):
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    StackName: StackNameOrId
    Status: ResourceSignalStatus
    UniqueId: ResourceSignalUniqueId


class StackDriftInformation(BaseModel):
    LastCheckTimestamp: Optional[Timestamp] = None
    StackDriftStatus_1: StackDriftStatus = Field(..., alias='StackDriftStatus')


class StackDriftInformationSummary(BaseModel):
    LastCheckTimestamp: Optional[Timestamp] = None
    StackDriftStatus_1: StackDriftStatus = Field(..., alias='StackDriftStatus')


class StackEvent(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    EventId_1: EventId = Field(..., alias='EventId')
    HookFailureMode_1: Optional[HookFailureMode] = Field(None, alias='HookFailureMode')
    HookInvocationPoint_1: Optional[HookInvocationPoint] = Field(
        None, alias='HookInvocationPoint'
    )
    HookStatus_1: Optional[HookStatus] = Field(None, alias='HookStatus')
    HookStatusReason_1: Optional[HookStatusReason] = Field(
        None, alias='HookStatusReason'
    )
    HookType_1: Optional[HookType] = Field(None, alias='HookType')
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    ResourceProperties_1: Optional[ResourceProperties] = Field(
        None, alias='ResourceProperties'
    )
    ResourceStatus_1: Optional[ResourceStatus] = Field(None, alias='ResourceStatus')
    ResourceStatusReason_1: Optional[ResourceStatusReason] = Field(
        None, alias='ResourceStatusReason'
    )
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    StackId_1: StackId = Field(..., alias='StackId')
    StackName_1: StackName = Field(..., alias='StackName')
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')


class StackEvents(RootModel[List[StackEvent]]):
    root: List[StackEvent]


class StackInstanceComprehensiveStatus(BaseModel):
    DetailedStatus: Optional[StackInstanceDetailedStatus] = None


class StackInstanceFilter(BaseModel):
    Name: Optional[StackInstanceFilterName] = None
    Values: Optional[StackInstanceFilterValues] = None


class StackInstanceFilters(RootModel[List[StackInstanceFilter]]):
    root: List[StackInstanceFilter] = Field(..., max_length=2)


class StackInstanceSummary(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')
    DriftStatus: Optional[StackDriftStatus] = None
    LastDriftCheckTimestamp: Optional[Timestamp] = None
    LastOperationId: Optional[ClientRequestToken] = None
    OrganizationalUnitId_1: Optional[OrganizationalUnitId] = Field(
        None, alias='OrganizationalUnitId'
    )
    Region_1: Optional[Region] = Field(None, alias='Region')
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackInstanceStatus: Optional[StackInstanceComprehensiveStatus] = None
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')
    Status: Optional[StackInstanceStatus] = None
    StatusReason: Optional[Reason] = None


class StackResourceDriftInformation(BaseModel):
    LastCheckTimestamp: Optional[Timestamp] = None
    StackResourceDriftStatus_1: StackResourceDriftStatus = Field(
        ..., alias='StackResourceDriftStatus'
    )


class StackResourceDriftInformationSummary(BaseModel):
    LastCheckTimestamp: Optional[Timestamp] = None
    StackResourceDriftStatus_1: StackResourceDriftStatus = Field(
        ..., alias='StackResourceDriftStatus'
    )


class StackResourceSummary(BaseModel):
    DriftInformation: Optional[StackResourceDriftInformationSummary] = None
    LastUpdatedTimestamp: Timestamp
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    ModuleInfo_1: Optional[ModuleInfo] = Field(None, alias='ModuleInfo')
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    ResourceStatus_1: ResourceStatus = Field(..., alias='ResourceStatus')
    ResourceStatusReason_1: Optional[ResourceStatusReason] = Field(
        None, alias='ResourceStatusReason'
    )
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class StackSetDriftDetectionDetails(BaseModel):
    DriftDetectionStatus: Optional[StackSetDriftDetectionStatus] = None
    DriftStatus: Optional[StackSetDriftStatus] = None
    DriftedStackInstancesCount_1: Optional[DriftedStackInstancesCount] = Field(
        None, alias='DriftedStackInstancesCount'
    )
    FailedStackInstancesCount_1: Optional[FailedStackInstancesCount] = Field(
        None, alias='FailedStackInstancesCount'
    )
    InProgressStackInstancesCount_1: Optional[InProgressStackInstancesCount] = Field(
        None, alias='InProgressStackInstancesCount'
    )
    InSyncStackInstancesCount_1: Optional[InSyncStackInstancesCount] = Field(
        None, alias='InSyncStackInstancesCount'
    )
    LastDriftCheckTimestamp: Optional[Timestamp] = None
    TotalStackInstancesCount_1: Optional[TotalStackInstancesCount] = Field(
        None, alias='TotalStackInstancesCount'
    )


class StackSetOperation(BaseModel):
    Action: Optional[StackSetOperationAction] = None
    AdministrationRoleARN: Optional[RoleARN] = None
    CreationTimestamp: Optional[Timestamp] = None
    DeploymentTargets_1: Optional[DeploymentTargets] = Field(
        None, alias='DeploymentTargets'
    )
    EndTimestamp: Optional[Timestamp] = None
    ExecutionRoleName_1: Optional[ExecutionRoleName] = Field(
        None, alias='ExecutionRoleName'
    )
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    RetainStacks: Optional[RetainStacksNullable] = None
    StackSetDriftDetectionDetails_1: Optional[StackSetDriftDetectionDetails] = Field(
        None, alias='StackSetDriftDetectionDetails'
    )
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')
    Status: Optional[StackSetOperationStatus] = None
    StatusDetails: Optional[StackSetOperationStatusDetails] = None
    StatusReason: Optional[StackSetOperationStatusReason] = None


class StackSetOperationResultSummary(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')
    AccountGateResult_1: Optional[AccountGateResult] = Field(
        None, alias='AccountGateResult'
    )
    OrganizationalUnitId_1: Optional[OrganizationalUnitId] = Field(
        None, alias='OrganizationalUnitId'
    )
    Region_1: Optional[Region] = Field(None, alias='Region')
    Status: Optional[StackSetOperationResultStatus] = None
    StatusReason: Optional[Reason] = None


class StackSetOperationSummary(BaseModel):
    Action: Optional[StackSetOperationAction] = None
    CreationTimestamp: Optional[Timestamp] = None
    EndTimestamp: Optional[Timestamp] = None
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    Status: Optional[StackSetOperationStatus] = None
    StatusDetails: Optional[StackSetOperationStatusDetails] = None
    StatusReason: Optional[StackSetOperationStatusReason] = None


class StackSetSummary(BaseModel):
    AutoDeployment_1: Optional[AutoDeployment] = Field(None, alias='AutoDeployment')
    Description_1: Optional[Description] = Field(None, alias='Description')
    DriftStatus: Optional[StackDriftStatus] = None
    LastDriftCheckTimestamp: Optional[Timestamp] = None
    ManagedExecution_1: Optional[ManagedExecution] = Field(
        None, alias='ManagedExecution'
    )
    PermissionModel: Optional[PermissionModels] = None
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')
    StackSetName_1: Optional[StackSetName] = Field(None, alias='StackSetName')
    Status: Optional[StackSetStatus] = None


class StackSummary(BaseModel):
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    DeletionTime_1: Optional[DeletionTime] = Field(None, alias='DeletionTime')
    DriftInformation: Optional[StackDriftInformationSummary] = None
    LastUpdatedTime_1: Optional[LastUpdatedTime] = Field(None, alias='LastUpdatedTime')
    ParentId: Optional[StackId] = None
    RootId: Optional[StackId] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: StackName = Field(..., alias='StackName')
    StackStatus_1: StackStatus = Field(..., alias='StackStatus')
    StackStatusReason_1: Optional[StackStatusReason] = Field(
        None, alias='StackStatusReason'
    )
    TemplateDescription_1: Optional[TemplateDescription] = Field(
        None, alias='TemplateDescription'
    )


class StageList(RootModel[List[TemplateStage]]):
    root: List[TemplateStage]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class TestTypeInput(BaseModel):
    Arn: Optional[TypeArn] = None
    LogDeliveryBucket: Optional[S3Bucket] = None
    Type: Optional[ThirdPartyType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    VersionId: Optional[TypeVersionId] = None


class TestTypeOutput(BaseModel):
    TypeVersionArn: Optional[TypeArn] = None


class TypeConfigurationDetails(BaseModel):
    Alias: Optional[TypeConfigurationAlias] = None
    Arn: Optional[TypeConfigurationArn] = None
    Configuration: Optional[TypeConfiguration] = None
    IsDefaultConfiguration_1: Optional[IsDefaultConfiguration] = Field(
        None, alias='IsDefaultConfiguration'
    )
    LastUpdated: Optional[Timestamp] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class TypeConfigurationDetailsList(RootModel[List[TypeConfigurationDetails]]):
    root: List[TypeConfigurationDetails]


class TypeConfigurationIdentifier(BaseModel):
    Type: Optional[ThirdPartyType] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeConfigurationAlias_1: Optional[TypeConfigurationAlias] = Field(
        None, alias='TypeConfigurationAlias'
    )
    TypeConfigurationArn_1: Optional[TypeConfigurationArn] = Field(
        None, alias='TypeConfigurationArn'
    )
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class TypeConfigurationIdentifiers(RootModel[List[TypeConfigurationIdentifier]]):
    root: List[TypeConfigurationIdentifier] = Field(..., min_length=1)


class TypeFilters(BaseModel):
    Category_1: Optional[Category] = Field(None, alias='Category')
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    TypeNamePrefix_1: Optional[TypeNamePrefix] = Field(None, alias='TypeNamePrefix')


class TypeSummary(BaseModel):
    DefaultVersionId: Optional[TypeVersionId] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    IsActivated_1: Optional[IsActivated] = Field(None, alias='IsActivated')
    LastUpdated: Optional[Timestamp] = None
    LatestPublicVersion: Optional[PublicVersionNumber] = None
    OriginalTypeName: Optional[TypeName] = None
    PublicVersionNumber_1: Optional[PublicVersionNumber] = Field(
        None, alias='PublicVersionNumber'
    )
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    PublisherIdentity: Optional[IdentityProvider] = None
    PublisherName_1: Optional[PublisherName] = Field(None, alias='PublisherName')
    Type: Optional[RegistryType] = None
    TypeArn_1: Optional[TypeArn] = Field(None, alias='TypeArn')
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')


class TypeVersionSummaries(RootModel[List[TypeVersionSummary]]):
    root: List[TypeVersionSummary]


class UnprocessedTypeConfigurations(RootModel[List[TypeConfigurationIdentifier]]):
    root: List[TypeConfigurationIdentifier]


class UpdateStackInstancesInput(BaseModel):
    Accounts: Optional[AccountList] = None
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    DeploymentTargets_1: Optional[DeploymentTargets] = Field(
        None, alias='DeploymentTargets'
    )
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    ParameterOverrides: Optional[Parameters] = None
    Regions: RegionList
    StackSetName: StackSetNameOrId


class UpdateStackSetInput(BaseModel):
    Accounts: Optional[AccountList] = None
    AdministrationRoleARN: Optional[RoleARN] = None
    AutoDeployment_1: Optional[AutoDeployment] = Field(None, alias='AutoDeployment')
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    DeploymentTargets_1: Optional[DeploymentTargets] = Field(
        None, alias='DeploymentTargets'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExecutionRoleName_1: Optional[ExecutionRoleName] = Field(
        None, alias='ExecutionRoleName'
    )
    ManagedExecution_1: Optional[ManagedExecution] = Field(
        None, alias='ManagedExecution'
    )
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    PermissionModel: Optional[PermissionModels] = None
    Regions: Optional[RegionList] = None
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')
    UsePreviousTemplate_1: Optional[UsePreviousTemplate] = Field(
        None, alias='UsePreviousTemplate'
    )


class ValidateTemplateOutput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    CapabilitiesReason_1: Optional[CapabilitiesReason] = Field(
        None, alias='CapabilitiesReason'
    )
    DeclaredTransforms: Optional[TransformsList] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Parameters: Optional[TemplateParameters] = None


class RollbackConfiguration(BaseModel):
    MonitoringTimeInMinutes_1: Optional[MonitoringTimeInMinutes] = Field(
        None, alias='MonitoringTimeInMinutes'
    )
    RollbackTriggers_1: Optional[RollbackTriggers] = Field(
        None, alias='RollbackTriggers'
    )


class ParameterOverrides(RootModel[List[Parameter]]):
    root: List[Parameter]


class Filters(RootModel[List[StackInstanceFilter]]):
    root: List[StackInstanceFilter] = Field(..., max_length=2)


class Filters1(RootModel[List[OperationResultFilter]]):
    root: List[OperationResultFilter] = Field(..., max_length=1)


class ActivateTypeInput(BaseModel):
    AutoUpdate_1: Optional[AutoUpdate] = Field(None, alias='AutoUpdate')
    ExecutionRoleArn: Optional[RoleArn] = None
    LoggingConfig_1: Optional[LoggingConfig] = Field(None, alias='LoggingConfig')
    MajorVersion_1: Optional[MajorVersion] = Field(None, alias='MajorVersion')
    PublicTypeArn: Optional[ThirdPartyTypeArn] = None
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    Type: Optional[ThirdPartyType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    TypeNameAlias: Optional[TypeName] = None
    VersionBump_1: Optional[VersionBump] = Field(None, alias='VersionBump')


class BatchDescribeTypeConfigurationsError(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    TypeConfigurationIdentifier_1: Optional[TypeConfigurationIdentifier] = Field(
        None, alias='TypeConfigurationIdentifier'
    )


class BatchDescribeTypeConfigurationsErrors(
    RootModel[List[BatchDescribeTypeConfigurationsError]]
):
    root: List[BatchDescribeTypeConfigurationsError]


class BatchDescribeTypeConfigurationsInput(BaseModel):
    TypeConfigurationIdentifiers_1: TypeConfigurationIdentifiers = Field(
        ..., alias='TypeConfigurationIdentifiers'
    )


class BatchDescribeTypeConfigurationsOutput(BaseModel):
    Errors: Optional[BatchDescribeTypeConfigurationsErrors] = None
    TypeConfigurations: Optional[TypeConfigurationDetailsList] = None
    UnprocessedTypeConfigurations_1: Optional[UnprocessedTypeConfigurations] = Field(
        None, alias='UnprocessedTypeConfigurations'
    )


class ChangeSetHook(BaseModel):
    FailureMode: Optional[HookFailureMode] = None
    InvocationPoint: Optional[HookInvocationPoint] = None
    TargetDetails: Optional[ChangeSetHookTargetDetails] = None
    TypeConfigurationVersionId: Optional[HookTypeConfigurationVersionId] = None
    TypeName: Optional[HookTypeName] = None
    TypeVersionId: Optional[HookTypeVersionId] = None


class ChangeSetHooks(RootModel[List[ChangeSetHook]]):
    root: List[ChangeSetHook]


class ChangeSetSummaries(RootModel[List[ChangeSetSummary]]):
    root: List[ChangeSetSummary]


class CreateStackInstancesInput(BaseModel):
    Accounts: Optional[AccountList] = None
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    DeploymentTargets_1: Optional[DeploymentTargets] = Field(
        None, alias='DeploymentTargets'
    )
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    ParameterOverrides: Optional[Parameters] = None
    Regions: RegionList
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class CreateStackSetInput(BaseModel):
    AdministrationRoleARN: Optional[RoleARN] = None
    AutoDeployment_1: Optional[AutoDeployment] = Field(None, alias='AutoDeployment')
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExecutionRoleName_1: Optional[ExecutionRoleName] = Field(
        None, alias='ExecutionRoleName'
    )
    ManagedExecution_1: Optional[ManagedExecution] = Field(
        None, alias='ManagedExecution'
    )
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    PermissionModel: Optional[PermissionModels] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')


class DeleteStackInstancesInput(BaseModel):
    Accounts: Optional[AccountList] = None
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    DeploymentTargets_1: Optional[DeploymentTargets] = Field(
        None, alias='DeploymentTargets'
    )
    OperationId: Optional[ClientRequestToken] = None
    OperationPreferences: Optional[StackSetOperationPreferences] = None
    Regions: RegionList
    RetainStacks_1: RetainStacks = Field(..., alias='RetainStacks')
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class DescribeChangeSetHooksOutput(BaseModel):
    ChangeSetId_1: Optional[ChangeSetId] = Field(None, alias='ChangeSetId')
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    Hooks: Optional[ChangeSetHooks] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')
    Status: Optional[ChangeSetHooksStatus] = None


class DescribeStackEventsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackEvents_1: Optional[StackEvents] = Field(None, alias='StackEvents')


class DescribeStackSetOperationOutput(BaseModel):
    StackSetOperation_1: Optional[StackSetOperation] = Field(
        None, alias='StackSetOperation'
    )


class DescribeTypeOutput(BaseModel):
    Arn: Optional[TypeArn] = None
    AutoUpdate_1: Optional[AutoUpdate] = Field(None, alias='AutoUpdate')
    ConfigurationSchema_1: Optional[ConfigurationSchema] = Field(
        None, alias='ConfigurationSchema'
    )
    DefaultVersionId: Optional[TypeVersionId] = None
    DeprecatedStatus_1: Optional[DeprecatedStatus] = Field(
        None, alias='DeprecatedStatus'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    DocumentationUrl: Optional[OptionalSecureUrl] = None
    ExecutionRoleArn: Optional[RoleArn] = None
    IsActivated_1: Optional[IsActivated] = Field(None, alias='IsActivated')
    IsDefaultVersion_1: Optional[IsDefaultVersion] = Field(
        None, alias='IsDefaultVersion'
    )
    LastUpdated: Optional[Timestamp] = None
    LatestPublicVersion: Optional[PublicVersionNumber] = None
    LoggingConfig_1: Optional[LoggingConfig] = Field(None, alias='LoggingConfig')
    OriginalTypeArn: Optional[TypeArn] = None
    OriginalTypeName: Optional[TypeName] = None
    ProvisioningType_1: Optional[ProvisioningType] = Field(
        None, alias='ProvisioningType'
    )
    PublicVersionNumber_1: Optional[PublicVersionNumber] = Field(
        None, alias='PublicVersionNumber'
    )
    PublisherId_1: Optional[PublisherId] = Field(None, alias='PublisherId')
    RequiredActivatedTypes_1: Optional[RequiredActivatedTypes] = Field(
        None, alias='RequiredActivatedTypes'
    )
    Schema: Optional[TypeSchema] = None
    SourceUrl: Optional[OptionalSecureUrl] = None
    TimeCreated: Optional[Timestamp] = None
    Type: Optional[RegistryType] = None
    TypeName_1: Optional[TypeName] = Field(None, alias='TypeName')
    TypeTestsStatus_1: Optional[TypeTestsStatus] = Field(None, alias='TypeTestsStatus')
    TypeTestsStatusDescription_1: Optional[TypeTestsStatusDescription] = Field(
        None, alias='TypeTestsStatusDescription'
    )
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class EstimateTemplateCostInput(BaseModel):
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')


class GetTemplateOutput(BaseModel):
    StagesAvailable: Optional[StageList] = None
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')


class ListChangeSetsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Summaries: Optional[ChangeSetSummaries] = None


class ListStackInstancesInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    Filters: Optional[StackInstanceFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackInstanceAccount: Optional[Account] = None
    StackInstanceRegion: Optional[Region] = None
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class ListStackSetOperationResultsInput(BaseModel):
    CallAs_1: Optional[CallAs] = Field(None, alias='CallAs')
    Filters: Optional[OperationResultFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OperationId: ClientRequestToken
    StackSetName_1: StackSetName = Field(..., alias='StackSetName')


class ListTypeVersionsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TypeVersionSummaries_1: Optional[TypeVersionSummaries] = Field(
        None, alias='TypeVersionSummaries'
    )


class ListTypesInput(BaseModel):
    DeprecatedStatus_1: Optional[DeprecatedStatus] = Field(
        None, alias='DeprecatedStatus'
    )
    Filters: Optional[TypeFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ProvisioningType_1: Optional[ProvisioningType] = Field(
        None, alias='ProvisioningType'
    )
    Type: Optional[RegistryType] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class PhysicalResourceIdContext(RootModel[List[PhysicalResourceIdContextKeyValuePair]]):
    root: List[PhysicalResourceIdContextKeyValuePair] = Field(..., max_length=5)


class ResourceChange(BaseModel):
    Action: Optional[ChangeAction] = None
    ChangeSetId_1: Optional[ChangeSetId] = Field(None, alias='ChangeSetId')
    Details: Optional[ResourceChangeDetails] = None
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    ModuleInfo_1: Optional[ModuleInfo] = Field(None, alias='ModuleInfo')
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    Replacement_1: Optional[Replacement] = Field(None, alias='Replacement')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Scope_1: Optional[Scope] = Field(None, alias='Scope')


class ResourceIdentifierSummaries(RootModel[List[ResourceIdentifierSummary]]):
    root: List[ResourceIdentifierSummary]


class Stack(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ChangeSetId_1: Optional[ChangeSetId] = Field(None, alias='ChangeSetId')
    CreationTime_1: CreationTime = Field(..., alias='CreationTime')
    DeletionTime_1: Optional[DeletionTime] = Field(None, alias='DeletionTime')
    Description_1: Optional[Description] = Field(None, alias='Description')
    DisableRollback_1: Optional[DisableRollback] = Field(None, alias='DisableRollback')
    DriftInformation: Optional[StackDriftInformation] = None
    EnableTerminationProtection_1: Optional[EnableTerminationProtection] = Field(
        None, alias='EnableTerminationProtection'
    )
    LastUpdatedTime_1: Optional[LastUpdatedTime] = Field(None, alias='LastUpdatedTime')
    NotificationARNs_1: Optional[NotificationARNs] = Field(
        None, alias='NotificationARNs'
    )
    Outputs_1: Optional[Outputs] = Field(None, alias='Outputs')
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ParentId: Optional[StackId] = None
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    RollbackConfiguration_1: Optional[RollbackConfiguration] = Field(
        None, alias='RollbackConfiguration'
    )
    RootId: Optional[StackId] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: StackName = Field(..., alias='StackName')
    StackStatus_1: StackStatus = Field(..., alias='StackStatus')
    StackStatusReason_1: Optional[StackStatusReason] = Field(
        None, alias='StackStatusReason'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeoutInMinutes: Optional[TimeoutMinutes] = None


class StackInstance(BaseModel):
    Account_1: Optional[Account] = Field(None, alias='Account')
    DriftStatus: Optional[StackDriftStatus] = None
    LastDriftCheckTimestamp: Optional[Timestamp] = None
    LastOperationId: Optional[ClientRequestToken] = None
    OrganizationalUnitId_1: Optional[OrganizationalUnitId] = Field(
        None, alias='OrganizationalUnitId'
    )
    ParameterOverrides: Optional[Parameters] = None
    Region_1: Optional[Region] = Field(None, alias='Region')
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackInstanceStatus: Optional[StackInstanceComprehensiveStatus] = None
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')
    Status: Optional[StackInstanceStatus] = None
    StatusReason: Optional[Reason] = None


class StackInstanceSummaries(RootModel[List[StackInstanceSummary]]):
    root: List[StackInstanceSummary]


class StackResource(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DriftInformation: Optional[StackResourceDriftInformation] = None
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    ModuleInfo_1: Optional[ModuleInfo] = Field(None, alias='ModuleInfo')
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    ResourceStatus_1: ResourceStatus = Field(..., alias='ResourceStatus')
    ResourceStatusReason_1: Optional[ResourceStatusReason] = Field(
        None, alias='ResourceStatusReason'
    )
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')


class StackResourceDetail(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DriftInformation: Optional[StackResourceDriftInformation] = None
    LastUpdatedTimestamp: Timestamp
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    ModuleInfo_1: Optional[ModuleInfo] = Field(None, alias='ModuleInfo')
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    ResourceStatus_1: ResourceStatus = Field(..., alias='ResourceStatus')
    ResourceStatusReason_1: Optional[ResourceStatusReason] = Field(
        None, alias='ResourceStatusReason'
    )
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')


class StackResourceDrift(BaseModel):
    ActualProperties: Optional[Properties] = None
    ExpectedProperties: Optional[Properties] = None
    LogicalResourceId_1: LogicalResourceId = Field(..., alias='LogicalResourceId')
    ModuleInfo_1: Optional[ModuleInfo] = Field(None, alias='ModuleInfo')
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    PhysicalResourceIdContext_1: Optional[PhysicalResourceIdContext] = Field(
        None, alias='PhysicalResourceIdContext'
    )
    PropertyDifferences_1: Optional[PropertyDifferences] = Field(
        None, alias='PropertyDifferences'
    )
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    StackId_1: StackId = Field(..., alias='StackId')
    StackResourceDriftStatus_1: StackResourceDriftStatus = Field(
        ..., alias='StackResourceDriftStatus'
    )
    Timestamp_1: Timestamp = Field(..., alias='Timestamp')


class StackResourceDrifts(RootModel[List[StackResourceDrift]]):
    root: List[StackResourceDrift]


class StackResourceSummaries(RootModel[List[StackResourceSummary]]):
    root: List[StackResourceSummary]


class StackResources(RootModel[List[StackResource]]):
    root: List[StackResource]


class StackSet(BaseModel):
    AdministrationRoleARN: Optional[RoleARN] = None
    AutoDeployment_1: Optional[AutoDeployment] = Field(None, alias='AutoDeployment')
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExecutionRoleName_1: Optional[ExecutionRoleName] = Field(
        None, alias='ExecutionRoleName'
    )
    ManagedExecution_1: Optional[ManagedExecution] = Field(
        None, alias='ManagedExecution'
    )
    OrganizationalUnitIds: Optional[OrganizationalUnitIdList] = None
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    PermissionModel: Optional[PermissionModels] = None
    Regions: Optional[RegionList] = None
    StackSetARN_1: Optional[StackSetARN] = Field(None, alias='StackSetARN')
    StackSetDriftDetectionDetails_1: Optional[StackSetDriftDetectionDetails] = Field(
        None, alias='StackSetDriftDetectionDetails'
    )
    StackSetId_1: Optional[StackSetId] = Field(None, alias='StackSetId')
    StackSetName_1: Optional[StackSetName] = Field(None, alias='StackSetName')
    Status: Optional[StackSetStatus] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')


class StackSetOperationResultSummaries(RootModel[List[StackSetOperationResultSummary]]):
    root: List[StackSetOperationResultSummary]


class StackSetOperationSummaries(RootModel[List[StackSetOperationSummary]]):
    root: List[StackSetOperationSummary]


class StackSetSummaries(RootModel[List[StackSetSummary]]):
    root: List[StackSetSummary]


class StackSummaries(RootModel[List[StackSummary]]):
    root: List[StackSummary]


class Stacks(RootModel[List[Stack]]):
    root: List[Stack]


class TypeSummaries(RootModel[List[TypeSummary]]):
    root: List[TypeSummary]


class UpdateStackInput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DisableRollback_1: Optional[DisableRollback] = Field(None, alias='DisableRollback')
    NotificationARNs_1: Optional[NotificationARNs] = Field(
        None, alias='NotificationARNs'
    )
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    RollbackConfiguration_1: Optional[RollbackConfiguration] = Field(
        None, alias='RollbackConfiguration'
    )
    StackName_1: StackName = Field(..., alias='StackName')
    StackPolicyBody_1: Optional[StackPolicyBody] = Field(None, alias='StackPolicyBody')
    StackPolicyDuringUpdateBody_1: Optional[StackPolicyDuringUpdateBody] = Field(
        None, alias='StackPolicyDuringUpdateBody'
    )
    StackPolicyDuringUpdateURL_1: Optional[StackPolicyDuringUpdateURL] = Field(
        None, alias='StackPolicyDuringUpdateURL'
    )
    StackPolicyURL_1: Optional[StackPolicyURL] = Field(None, alias='StackPolicyURL')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')
    UsePreviousTemplate_1: Optional[UsePreviousTemplate] = Field(
        None, alias='UsePreviousTemplate'
    )


class Change(BaseModel):
    HookInvocationCount_1: Optional[HookInvocationCount] = Field(
        None, alias='HookInvocationCount'
    )
    ResourceChange_1: Optional[ResourceChange] = Field(None, alias='ResourceChange')
    Type: Optional[ChangeType] = None


class Changes(RootModel[List[Change]]):
    root: List[Change]


class CreateChangeSetInput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ChangeSetName_1: ChangeSetName = Field(..., alias='ChangeSetName')
    ChangeSetType_1: Optional[ChangeSetType] = Field(None, alias='ChangeSetType')
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    Description_1: Optional[Description] = Field(None, alias='Description')
    IncludeNestedStacks_1: Optional[IncludeNestedStacks] = Field(
        None, alias='IncludeNestedStacks'
    )
    NotificationARNs_1: Optional[NotificationARNs] = Field(
        None, alias='NotificationARNs'
    )
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')
    ResourcesToImport_1: Optional[ResourcesToImport] = Field(
        None, alias='ResourcesToImport'
    )
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    RollbackConfiguration_1: Optional[RollbackConfiguration] = Field(
        None, alias='RollbackConfiguration'
    )
    StackName: StackNameOrId
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')
    UsePreviousTemplate_1: Optional[UsePreviousTemplate] = Field(
        None, alias='UsePreviousTemplate'
    )


class CreateStackInput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DisableRollback_1: Optional[DisableRollback] = Field(None, alias='DisableRollback')
    EnableTerminationProtection_1: Optional[EnableTerminationProtection] = Field(
        None, alias='EnableTerminationProtection'
    )
    NotificationARNs_1: Optional[NotificationARNs] = Field(
        None, alias='NotificationARNs'
    )
    OnFailure_1: Optional[OnFailure] = Field(None, alias='OnFailure')
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')
    RollbackConfiguration_1: Optional[RollbackConfiguration] = Field(
        None, alias='RollbackConfiguration'
    )
    StackName_1: StackName = Field(..., alias='StackName')
    StackPolicyBody_1: Optional[StackPolicyBody] = Field(None, alias='StackPolicyBody')
    StackPolicyURL_1: Optional[StackPolicyURL] = Field(None, alias='StackPolicyURL')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateURL_1: Optional[TemplateURL] = Field(None, alias='TemplateURL')
    TimeoutInMinutes: Optional[TimeoutMinutes] = None


class DescribeChangeSetOutput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    ChangeSetId_1: Optional[ChangeSetId] = Field(None, alias='ChangeSetId')
    ChangeSetName_1: Optional[ChangeSetName] = Field(None, alias='ChangeSetName')
    Changes_1: Optional[Changes] = Field(None, alias='Changes')
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    Description_1: Optional[Description] = Field(None, alias='Description')
    ExecutionStatus_1: Optional[ExecutionStatus] = Field(None, alias='ExecutionStatus')
    IncludeNestedStacks_1: Optional[IncludeNestedStacks] = Field(
        None, alias='IncludeNestedStacks'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    NotificationARNs_1: Optional[NotificationARNs] = Field(
        None, alias='NotificationARNs'
    )
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    ParentChangeSetId: Optional[ChangeSetId] = None
    RollbackConfiguration_1: Optional[RollbackConfiguration] = Field(
        None, alias='RollbackConfiguration'
    )
    RootChangeSetId: Optional[ChangeSetId] = None
    StackId_1: Optional[StackId] = Field(None, alias='StackId')
    StackName_1: Optional[StackName] = Field(None, alias='StackName')
    Status: Optional[ChangeSetStatus] = None
    StatusReason: Optional[ChangeSetStatusReason] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribeStackInstanceOutput(BaseModel):
    StackInstance_1: Optional[StackInstance] = Field(None, alias='StackInstance')


class DescribeStackResourceDriftsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackResourceDrifts_1: StackResourceDrifts = Field(..., alias='StackResourceDrifts')


class DescribeStackResourceOutput(BaseModel):
    StackResourceDetail_1: Optional[StackResourceDetail] = Field(
        None, alias='StackResourceDetail'
    )


class DescribeStackResourcesOutput(BaseModel):
    StackResources_1: Optional[StackResources] = Field(None, alias='StackResources')


class DescribeStackSetOutput(BaseModel):
    StackSet_1: Optional[StackSet] = Field(None, alias='StackSet')


class DescribeStacksOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Stacks_1: Optional[Stacks] = Field(None, alias='Stacks')


class DetectStackResourceDriftOutput(BaseModel):
    StackResourceDrift_1: StackResourceDrift = Field(..., alias='StackResourceDrift')


class GetTemplateSummaryOutput(BaseModel):
    Capabilities_1: Optional[Capabilities] = Field(None, alias='Capabilities')
    CapabilitiesReason_1: Optional[CapabilitiesReason] = Field(
        None, alias='CapabilitiesReason'
    )
    DeclaredTransforms: Optional[TransformsList] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Metadata_1: Optional[Metadata] = Field(None, alias='Metadata')
    Parameters: Optional[ParameterDeclarations] = None
    ResourceIdentifierSummaries_1: Optional[ResourceIdentifierSummaries] = Field(
        None, alias='ResourceIdentifierSummaries'
    )
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')
    Version_1: Optional[Version] = Field(None, alias='Version')


class ListStackInstancesOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Summaries: Optional[StackInstanceSummaries] = None


class ListStackResourcesOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackResourceSummaries_1: Optional[StackResourceSummaries] = Field(
        None, alias='StackResourceSummaries'
    )


class ListStackSetOperationResultsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Summaries: Optional[StackSetOperationResultSummaries] = None


class ListStackSetOperationsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Summaries: Optional[StackSetOperationSummaries] = None


class ListStackSetsOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Summaries: Optional[StackSetSummaries] = None


class ListStacksOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StackSummaries_1: Optional[StackSummaries] = Field(None, alias='StackSummaries')


class ListTypesOutput(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TypeSummaries_1: Optional[TypeSummaries] = Field(None, alias='TypeSummaries')
